Enter passphrase for key '/Users/philipm/.ssh/id_ed25519': 
Last login: Mon Jun 30 22:17:45 2025 from 10.70.128.8
 ____              _           _
|  _ \            | |         | |
| |_) | __ _  ___ | |__   __ _| |__
|  _ < / _` |/ _ \| '_ \ / _` | '_ \
| |_) | (_| | (_) | |_) | (_| | |_) |
|____/ \__,_|\___/|_.__/ \__,_|_.__/
             _             _      __ 
            | |           (_)    /_ |
            | | ___   __ _ _ _ __ | |
            | |/ _ \ / _` | | '_ \| |
            | | (_) | (_| | | | | | |
            |_|\___/ \__, |_|_| |_|_|
                      __/ |          
                      |___/  

 Documentation: https://doc.eresearch.unige.ch/hpc/start
 Forum: https://hpc-community.unige.ch/
 OpenOndemand: https://openondemand.baobab.hpc.unige.ch/
 support: https://doc.eresearch.unige.ch/hpc/start#support_-_get_help


(baobab)-[philipm@login1 ~]$ module load GCCcore/11.3.0 Python/3.10.4
python(baobab)-[philipm@login1 ~]$ python --version
Python 3.10.4
(baobab)-[philipm@login1 ~]$ cd rtk
(baobab)-[philipm@login1 rtk]$ ls
custom_check.py       images-erreurs         rtk                  slurm-925077.out
env                   krakenv                rtk-script.py        slurm-925484.out
example-manifests.py  manifests.txt          rtk-script-taton.py  submission.sh
HOWTO.md              models                 rtk-script-test.py   tests
howto.png             pytest.ini             setup.py             yaltaienv
images                quickyaltaiinstall.sh  slurm-856712.out
images2               README.md              slurm-863221.out
images3               requirements.txt       slurm-863280.out
(baobab)-[philipm@login1 rtk]$ salloc --partition=shared-cpu --time=00:45:00 --cpus-per-task=4 --mem=32GB
salloc: Pending job allocation 933682
salloc: job 933682 queued and waiting for resources
salloc: job 933682 has been allocated resources
salloc: Granted job allocation 933682
salloc: Waiting for resource configuration
salloc: Nodes cpu321 are ready for job
bash-5.1$ source env/bin/activate
(env) bash-5.1$ python rtk-script-taton.py
[Task] Segment
Using default Kraken line segmenter.
[Subtask] Checking prior processed documents: 100%|████████| 40/40 [00:00<00:00, 3709.07it/s]
[Subtask] Processing YALTAi segmenter command:   2%|▏      | 1/40 [01:40<1:05:08, 100.21s/it]Error detected in subprocess...

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/users/p/philipm/rtk/yaltaienv/bin/yaltai:8 in <module>                                     │
│                                                                                                  │
│   5 from yaltai.cli.yaltai import yaltai_cli                                                     │
│   6 if __name__ == '__main__':                                                                   │
│   7 │   sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])                         │
│ ❱ 8 │   sys.exit(yaltai_cli())                                                                   │
│   9                                                                                              │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:1442 in __call__  │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:1363 in main      │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:1830 in invoke    │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:1862 in invoke    │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:1799 in           │
│ _process_result                                                                                  │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/click/core.py:794 in invoke     │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/kraken/kraken.py:431 in         │
│ process_pipeline                                                                                 │
│                                                                                                  │
│   428 │   │   │   │   if len(fc) - 2 == idx:                                                     │
│   429 │   │   │   │   │   ctx.meta['last_process'] = True                                        │
│   430 │   │   │   │   with threadpool_limits(limits=ctx.meta['threads']):                        │
│ ❱ 431 │   │   │   │   │   task(input=input, output=output)                                       │
│   432 │   │   except Exception as e:                                                             │
│   433 │   │   │   logger.error(f'Failed processing {io_pair[0]}: {str(e)}')                      │
│   434 │   │   │   if ctx.meta['raise_failed']:                                                   │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/yaltai/cli/krakn.py:49 in       │
│ segmenter                                                                                        │
│                                                                                                  │
│    46 │   │   │   yolo_model, input=input,                                                       │
│    47 │   │   │   apply_deskew=deskew, max_angle=max_angle                                       │
│    48 │   │   )                                                                                  │
│ ❱  49 │   │   res: Segmentation = yaltai.models.krakn.segment(                                   │
│    50 │   │   │   im, text_direction, mask=mask, model=model, device=device,                     │
│    51 │   │   │   regions=regions, ignore_lignes=ignore_lines,                                   │
│    52 │   │   │   raise_on_error=ctx.meta['raise_failed'], autocast=ctx.meta["autocast"]         │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/yaltai/models/krakn.py:135 in   │
│ segment                                                                                          │
│                                                                                                  │
│   132 │   │   suppl_obj = scale_regions([x.boundary for x in suppl_obj], 1/rets['scale'])        │
│   133 │   │   line_regs = scale_regions([x.boundary for x in line_regs], 1/rets['scale'])        │
│   134 │   │                                                                                      │
│ ❱ 135 │   │   _lines = vec_lines(**rets,                                                         │
│   136 │   │   │   │   │   │      regions=line_regs,                                              │
│   137 │   │   │   │   │   │      text_direction=text_direction,                                  │
│   138 │   │   │   │   │   │      suppl_obj=suppl_obj,                                            │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/kraken/blla.py:229 in vec_lines │
│                                                                                                  │
│   226 │   │   for reg_idx, reg_pol in enumerate(reg_pols):                                       │
│   227 │   │   │   if is_in_region(bl_ls, reg_pol):                                               │
│   228 │   │   │   │   suppl_obj.append(regions[reg_idx])                                         │
│ ❱ 229 │   │   pol = calculate_polygonal_environment(baselines=[bl[1]],                           │
│   230 │   │   │   │   │   │   │   │   │   │   │     im_feats=im_feats,                           │
│   231 │   │   │   │   │   │   │   │   │   │   │     suppl_obj=suppl_obj,                         │
│   232 │   │   │   │   │   │   │   │   │   │   │     topline=topline,                             │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/kraken/lib/segmentation.py:766  │
│ in calculate_polygonal_environment                                                               │
│                                                                                                  │
│    763 │   │   │   p_dir = (p_dir.T / np.sqrt(np.sum(p_dir**2, axis=-1)))                        │
│    764 │   │   │   env_up, env_bottom = _calc_roi(line, bounds, baselines[:idx] + baselines[idx  │
│    765 │   │   │                                                                                 │
│ ❱  766 │   │   │   polygons.append(_extract_patch(env_up,                                        │
│    767 │   │   │   │   │   │   │   │   │   │      env_bottom,                                    │
│    768 │   │   │   │   │   │   │   │   │   │      line.astype('int'),                            │
│    769 │   │   │   │   │   │   │   │   │   │      offset_line.astype('int'),                     │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/kraken/lib/segmentation.py:590  │
│ in _extract_patch                                                                                │
│                                                                                                  │
│    587 │   bottom_offset_polygon = np.concatenate((offset_baseline, env_bottom[::-1]))           │
│    588 │                                                                                         │
│    589 │   angle = np.arctan2(dir_vec[1], dir_vec[0])                                            │
│ ❱  590 │   roi_polygon = unary_union([geom.Polygon(upper_polygon), geom.Polygon(bottom_polygon)  │
│    591 │                                                                                         │
│    592 │   if topline:                                                                           │
│    593 │   │   upper_seam = _calc_seam(baseline, upper_polygon, angle, im_feats)                 │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/shapely/ops.py:135 in           │
│ unary_union                                                                                      │
│                                                                                                  │
│   132 │   │   Usually used to convert a collection into the smallest set of polygons             │
│   133 │   │   that cover the same area.                                                          │
│   134 │   │   """                                                                                │
│ ❱ 135 │   │   return shapely.union_all(geoms, axis=None)                                         │
│   136                                                                                            │
│   137                                                                                            │
│   138 operator = CollectionOperator()                                                            │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/shapely/decorators.py:77 in     │
│ wrapped                                                                                          │
│                                                                                                  │
│   74 │   │   try:                                                                                │
│   75 │   │   │   for arr in array_args:                                                          │
│   76 │   │   │   │   arr.flags.writeable = False                                                 │
│ ❱ 77 │   │   │   return func(*args, **kwargs)                                                    │
│   78 │   │   finally:                                                                            │
│   79 │   │   │   for arr, old_flag in zip(array_args, old_flags):                                │
│   80 │   │   │   │   arr.flags.writeable = old_flag                                              │
│                                                                                                  │
│ /home/users/p/philipm/rtk/yaltaienv/lib/python3.10/site-packages/shapely/set_operations.py:421   │
│ in union_all                                                                                     │
│                                                                                                  │
│   418 │   │                                                                                      │
│   419 │   │   return lib.unary_union_prec(collections, grid_size, **kwargs)                      │
│   420 │                                                                                          │
│ ❱ 421 │   return lib.unary_union(collections, **kwargs)                                          │
│   422                                                                                            │
│   423                                                                                            │
│   424 unary_union = union_all                                                                    │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
GEOSException: TopologyException: side location conflict at 295.5 369.80000000000001. This can occur if the input geometry is invalid.

Stopped process

image 1/1 /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: 1088x1280 2 MainZones, 4 MarginTextZones, 9709.0ms
Speed: 54.1ms preprocess, 9709.0ms inference, 62.4ms postprocess per image at shape (1, 3, 1088, 1280)
[07/01/25 09:35:04] INFO     Vectorizing baselines                                                                                                                                                                                                                                               blla.py:211
[07/01/25 09:35:14] ERROR    Failed processing /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: TopologyException: side location conflict at 295.5 369.80000000000001. This can occur if the input geometry is invalid.                        kraken.py:433

image 1/1 /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: 1088x1280 2 MainZones, 4 MarginTextZones, 9709.0ms
Speed: 54.1ms preprocess, 9709.0ms inference, 62.4ms postprocess per image at shape (1, 3, 1088, 1280)
[07/01/25 09:35:04] INFO     Vectorizing baselines                                                                                                                                                                                                                                               blla.py:211
[07/01/25 09:35:14] ERROR    Failed processing /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: TopologyException: side location conflict at 295.5 369.80000000000001. This can occur if the input geometry is invalid.                        kraken.py:433
INPUT SIZE DIFF WITH OUTPUT SIZE
['', 'image 1/1 /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: 1088x1280 2 MainZones, 4 MarginTextZones, 9709.0ms', 'Speed: 54.1ms preprocess, 9709.0ms inference, 62.4ms postprocess per image at shape (1, 3, 1088, 1280)', '[07/01/25 09:35:04] INFO     Vectorizing baselines                                                                                                                                                                                                                                               blla.py:211', '[07/01/25 09:35:14] ERROR    Failed processing /home/users/p/philipm/rtk/images2/Lucas_Alexandre_1787_COL_E_294/FRCAOM06_COLE_241457A_0288.jpg: TopologyException: side location conflict at 295.5 369.80000000000001. This can occur if the input geometry is invalid.                        kraken.py:433']
[Subtask] Processing YALTAi segmenter command:  50%|████▌    | 20/40 [12:18<12:18, 36.93s/it]
[Task] Clean-Up Serialization
[Subtask] Checking prior processed documents: 100%|█████████| 20/20 [00:00<00:00, 142.01it/s]
[Subtask] Cleaning...: 100%|████████████████████████████████| 20/20 [00:00<00:00, 310.15it/s]
[Task] OCR
[Subtask] Checking prior processed documents: 100%|█████████| 20/20 [00:00<00:00, 512.95it/s]
[Subtask] Processing Kraken recognizer command: 100%|████████| 20/20 [07:43<00:00, 23.20s/it]
[Task] Extract
[Subtask] Checking prior processed documents: 100%|████████| 20/20 [00:00<00:00, 2953.94it/s]
[Subtask] Cleaning...: 100%|█████████████████████████████████| 20/20 [00:00<00:00, 35.29it/s]
(env) bash-5.1$ 
